package com.king.automata.model;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;

import javax.microedition.khronos.opengles.GL10;

import org.simpleframework.xml.Element;
import org.simpleframework.xml.Root;

/**
 * Class to represent a cell in the simulation
 * @author king
 *
 */
@Root
public class Cell {
	
	CellState cellState;
	
	@Element(name="red")
	float r;
	
	@Element(name="green")
	float g;
	
	@Element(name="blue")
	float b;
	
	float a;
	float x = 0f, y=1f, z=0f;
	
	private static FloatBuffer   mVertexBuffer;
    private FloatBuffer   mColorBuffer;
	private static ByteBuffer  mIndexBuffer;
	private static float SCALE = 1f;
	private static float TICK_SCALE = 0.0659f;
	static {
		float vertices[] = {
            -SCALE, -SCALE, 0,
            SCALE, -SCALE, 0,
            SCALE,  SCALE, 0,
            -SCALE,  SCALE, 0
        };
		byte indices[] = {
				0,3,2,	0,2,1
		};
		ByteBuffer vbb = ByteBuffer.allocateDirect(vertices.length*4);
        vbb.order(ByteOrder.nativeOrder());
        mVertexBuffer = vbb.asFloatBuffer();
        mVertexBuffer.put(vertices);
        mVertexBuffer.position(0);
        
		mIndexBuffer = ByteBuffer.allocateDirect(indices.length);
        mIndexBuffer.put(indices);
        mIndexBuffer.position(0);
	}
	
	/**
	 * These cells are so FRESH.
	 * @param x
	 * @param y
	 * @param z
	 */
	public Cell(
			@Element(name="red") float red, 
			@Element(name="green") float green, 
			@Element(name="blue") float blue) {
		cellState = CellState.ALIVE;
		r = red;
		g = green;
		b = blue;
		a = 1.0f;
		float colors[] = {
                r,   g,    b,  a,
                r,   g,    b,  a,
                r,   g,    b,  a,
                r,   g,    b,  a
        };
		ByteBuffer cbb = ByteBuffer.allocateDirect(colors.length*4);
        cbb.order(ByteOrder.nativeOrder());
        mColorBuffer = cbb.asFloatBuffer();
        mColorBuffer.put(colors);
        mColorBuffer.position(0);
	}
	
	public void setColors(float red, float green, float blue) {
		r = red;
		g = green;
		b = blue;
		a = 1.0f;
		float colors[] = {
                r,   g,    b,  a,
                r,   g,    b,  a,
                r,   g,    b,  a,
                r,   g,    b,  a
        };
		ByteBuffer cbb = ByteBuffer.allocateDirect(colors.length*4);
        cbb.order(ByteOrder.nativeOrder());
        mColorBuffer = cbb.asFloatBuffer();
        mColorBuffer.put(colors);
        mColorBuffer.position(0);
	}
	
	public void draw(GL10 gl, int animationTick) {
		if(CellState.FRESH == cellState)
			gl.glScalef(animationTick * TICK_SCALE, animationTick * TICK_SCALE, 1f);
		if(CellState.DYING == cellState)
			gl.glScalef(1f - (animationTick * TICK_SCALE), 1f - (animationTick * TICK_SCALE), 1f);
		gl.glFrontFace(GL10.GL_CW);
        gl.glVertexPointer(3, GL10.GL_FLOAT, 0, mVertexBuffer);
        gl.glColorPointer(4, GL10.GL_FLOAT, 0, mColorBuffer);
        gl.glDrawElements(GL10.GL_TRIANGLES, 6, GL10.GL_UNSIGNED_BYTE, mIndexBuffer);
	}
}
